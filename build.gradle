import groovy.json.JsonSlurper

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.4/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = "com.unstoppabledomains.resolution"
archivesBaseName = "resolution"

task getVersion {
    def client = file('src/main/resources/com/unstoppabledomains/client/client.json')
    version = new JsonSlurper().parseText(client.text).'version'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.esaulpaugh:headlong:3.4.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.65.01'

    // Use JUnit test framework
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    testImplementation("junit:junit:4.13")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.2")
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name.set("resolution")
                description.set("Resolution library that talks with etherium .crypto registry to resolve various information attached to .crypto domain")
                url.set("https://github.com/unstoppabledomains/resolution-java")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("http://www.opensource.org/licenses/mit-license.php")
                    }
                }
                developers {
                    developer {
                        id.set("GentelmanJohn")
                        name.set("Jeyhun")
                        email.set("johnny@unstoppabledomains.com")
                        organization.set("com.github.unstoppabledomains")
                        organizationUrl.set("https://unstoppabledomains.com")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/unstoppabledomains/resolution-java.git")
                    developerConnection.set("scm:git:ssh://github.com/unstoppabledomains/resolution-java.git")
                    url.set("https://github.com/unstoppabledomains/resolution-java")
                }
            }
        }
    }
    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}
